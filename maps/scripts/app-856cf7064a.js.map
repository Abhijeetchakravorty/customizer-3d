{"version":3,"sources":["scripts/app.js"],"names":["angular","module","BaseController","$scope","$base64","loadMesh","plane_new","position","set","self","x_axis","loadBackMesh","plane_back_new","loadModel","modelUrl","loader1","load","assimpjson","traverse","child","THREE","Mesh","object_json","scale","x","y","z","undefined","modelTexture","material","map","updateMatrix","previous","scene","remove","add","init","parentDiv","document","getElementById","container","getElementsByClassName","childElement","style","width","window","innerWidth","Scene","fog","Fog","camera","PerspectiveCamera","innerHeight","target","Vector3","light","AmbientLight","DirectionalLight","multiplyScalar","castShadow","shadow","mapSize","height","d","left","right","top","bottom","far","geometry","TextureLoader","SphereGeometry","MeshBasicMaterial","meshCube","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","setClearColor","color","appendChild","domElement","gammaInput","gammaOutput","shadowMap","enabled","controls","OrbitControls","maxPolarAngle","Math","PI","minDistance","maxDistance","addEventListener","onWindowResize","animate","requestAnimationFrame","render","aspect","updateProjectionMatrix","geometry_new","geometry_back","front_counter","back_counter","objects","selection","AssimpJSONLoader","raycaster","Raycaster","offset","isDragging","previousMousePosition","this","clickedColor","param","setHex","number_changed","ImageLoader","fileNameChanged","element","backFileReader","FileReader","readAsDataURL","files","onload","e","i","length","console","log","splice","backDataUrl","result","back_texture","PlaneGeometry","material_back_new","transparent","rotateY","push","frontImageChanged","fileReader","dataUrl","texture","material_new","wrapImageChanged","textureUrl","wrapS","ClampToEdgeWrapping","wrapT","RepeatWrapping","needsUpdate","repeat","counter","$","on","mouseX","Projector","clientX","clientWidth","mouseY","clientY","clientHeight","vector","unproject","sub","normalize","intersects","intersectObjects","enableRotate","object","point","intersectObject","copy","offsetX","offsetY","$inject","controller","runBlock","$log","debug","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","templateUrl","controllerAs","otherwise","config","tjsModelViewer","restrict","scope","assimpUrl","link","elem","attr","FogExp2","directionalLight","random","event","timer","Date","now","cos","sin","lookAt","$watch","newValue","oldValue","ngFileSelect","$resource","el","bind","s","append","value","directive","constant","moment","$logProvider","toastrConfig","$templateCache","put"],"mappings":"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","file":"scripts/app-856cf7064a.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('sites', ['ngResource', 'ui.router', 'ui.bootstrap', 'toastr', 'ngFileUpload', 'base64']);\n\n})();\n\n(function() {\n        'use strict';\n\n        angular\n                .module('sites')\n                .controller('BaseController', BaseController);\n\n        /** @ngInject */\n        function BaseController($scope, $base64) {\n                // $scope.assimpModelUrl = \"app/base/interior.3ds.json\";\n                var container, stats, sideNav, parentDiv, childElement;\n                var modelTexture;\n                var front_counter = 0;\n                var back_counter = 0;\n                var plane_new;\n                var plane_back_new;\n                var camera, scene, renderer;\n                var controls;\n                var clothGeometry;\n                var sphere;\n                var objects = [];\n                var previous;\n                var textureEquirec, textureCube;\n                var mesh;\n                var selection = null;\n                var meshCube;\n                var object_json;\n                var geometry_new;\n                var geometry_back;\n                var loader1 = new THREE.AssimpJSONLoader();\n                var raycaster = new THREE.Raycaster();\n                var offset = new THREE.Vector3();\n                var isDragging = false;\n                var previousMousePosition = {\n                        x: 0,\n                        y: 0\n                };\n\n                var self = this;\n\n                self.clickedColor = function(param){\n                        // console.log(param);\n                        // console.log(object_json);\n                        object_json.traverse(function(child) {\n                                if (child instanceof THREE.Mesh) {\n                                        // console.log(child);\n                                        child.material.color.setHex(param);\n                                        // console.log('i am in');\n                                }\n                        });\n                }\n\n                self.x_axis = -80;\n\n                self.number_changed = function() {\n                        // console.log('i was changed');\n                        loadMesh();\n                }\n\n                var image_loader = new THREE.ImageLoader();\n\n                init();\n\n                function loadMesh() {\n                        plane_new.position.set(self.x_axis, 200, 95)\n                }\n\n                function loadBackMesh(){\n                        plane_back_new.position.set(-80, 200, -165);\n                }\n\n                $scope.fileNameChanged = function(element) {\n                        // console.log(element.files);\n                        // var fileReader = new FileReader();\n                        var backFileReader = new FileReader();\n                        // fileReader.readAsDataURL(element.files[0]); // convert the image to data url. \n                        backFileReader.readAsDataURL(element.files[0]); // convert the image to data url. \n                        backFileReader.onload = function(e) {\n                                back_counter++;\n                                if (back_counter > 1) {\n                                        scene.remove(plane_back_new);\n                                        for (var i=0;i<objects.length;i++) {\n                                                console.log(objects[i].position.z);\n                                                if (objects[i].position.z < 1) {\n                                                        console.log('hi i sm here');\n                                                        objects.splice(i, 1);\n                                                }\n                                        }\n                                }\n                                $scope.backDataUrl = e.target.result; // Retrieve the image.\n                                \n                                var back_texture = new THREE.TextureLoader().load($scope.backDataUrl);\n\n                                geometry_back = new THREE.PlaneGeometry(200, 150, 0);\n\n                                var material_back_new = new THREE.MeshBasicMaterial({\n                                        map: back_texture,\n                                        transparent: true\n                                });\n\n                                plane_back_new = new THREE.Mesh(geometry_back, material_back_new);\n                                plane_back_new.rotateY( -Math.PI / 180 * 185 );\n                                loadBackMesh();\n\n                                scene.add(plane_back_new);\n                                objects.push(plane_back_new);\n\n                                console.log(objects);\n                        }\n\n                };\n\n                $scope.frontImageChanged = function(element) {\n                        // console.log(element);\n                        // console.log(element.files);\n                        var fileReader = new FileReader();\n                        // var backFileReader = new FileReader();\n                        fileReader.readAsDataURL(element.files[0]); // convert the image to data url. \n                        // backFileReader.readAsDataURL(element.files[1]); // convert the image to data url. \n                        fileReader.onload = function(e) {\n                                front_counter++;\n                                if (front_counter > 1) {\n                                        scene.remove(plane_new);\n                                        for (var i=0;i<objects.length;i++) {\n                                                console.log(objects[i].position.z);\n                                                if (objects[i].position.z > 1) {\n                                                        console.log('hi i sm here');\n                                                        objects.splice(i, 1);\n                                                }\n                                        }\n                                }\n                                $scope.dataUrl = e.target.result; // Retrieve the image.\n                                // var get_file_path = fileReader.readAsDataURL(file);\n                                // console.log(element.files[0]);\n                                var texture = new THREE.TextureLoader().load($scope.dataUrl);\n\n                                // console.log(texture);\n                                \n                                // var back_texture = new THREE.TextureLoader().load('assets/images/angular.png');\n\n\n                                geometry_new = new THREE.PlaneGeometry(200, 150, 0);\n\n                                // geometry_back = new THREE.PlaneGeometry(200, 150, 0);\n\n                                var material_new = new THREE.MeshBasicMaterial({\n                                        map: texture,\n                                        transparent: true\n                                });\n\n                                // var material_back_new = new THREE.MeshBasicMaterial({\n                                //         map: back_texture,\n                                //         transparent: true\n                                // });\n\n                                // console.log(material_new);\n\n                                plane_new = new THREE.Mesh(geometry_new, material_new);\n                                // plane_back_new = new THREE.Mesh(geometry_back, material_back_new);\n                                // plane_back_new.rotateY( -Math.PI / 180 * 185 );\n                                loadMesh();\n                                // loadBackMesh();\n                                scene.add(plane_new);\n                                // scene.add(plane_back_new);\n                                objects.push(plane_new);\n                                console.log(objects);\n                                // objects.push(plane_back_new);\n                        }\n                }\n\n                $scope.wrapImageChanged = function(element) {\n                        // console.log(element);\n                        var fileReader = new FileReader();\n                        // var backFileReader = new FileReader();\n                        fileReader.readAsDataURL(element.files[0]); // convert the image to data url. \n\n                        fileReader.onload = function(e) {\n                                $scope.textureUrl = e.target.result; // Retrieve the image.\n                                // console.log(e.target);\n                                modelTexture = new THREE.TextureLoader().load($scope.textureUrl);\n                                // console.log($scope.textureUrl);\n                                modelTexture.wrapS = THREE.ClampToEdgeWrapping;\n                                modelTexture.wrapT = THREE.RepeatWrapping;\n                                modelTexture.needsUpdate = true;\n                                modelTexture.repeat.set(2, 2);\n                                loadModel('app/base/interior.3ds.json');\n                        }\n                        \n                }\n\n                function loadModel(modelUrl) {\n                        loader1.load(modelUrl, function(assimpjson) {\n                                assimpjson.traverse(function(child) {\n                                        if (child instanceof THREE.Mesh) {\n                                                // console.log(child.geometry);\n                                                object_json = assimpjson;\n                                                assimpjson.scale.x = 30;\n                                                assimpjson.scale.y = 30;\n                                                assimpjson.scale.z = 30;\n                                                assimpjson.position.x = 120;\n                                                assimpjson.position.y = -200;\n                                                assimpjson.position.z = 0;\n                                                if(modelTexture != undefined) {\n                                                        child.material.map = modelTexture;       \n                                                }\n                                                // console.log(child);\n                                                assimpjson.updateMatrix();\n                                                if (previous) scene.remove(previous);\n                                                scene.add(assimpjson);\n                                                previous = assimpjson;\n                                        }\n                                });\n                        });\n                }\n\n\n                animate();\n\n                function init() {\n                        parentDiv = document.getElementById('webGLContainer');\n                        container = document.getElementsByClassName('mainContainer');\n                        childElement = document.getElementById('sideNav');\n                        (document.getElementsByClassName('mainContainer')[0]).style.width = window.innerWidth - 400 + 'px';\n                        document.getElementById('sideNav').style.width = 400 + 'px';\n                        // scene\n                        scene = new THREE.Scene();\n                        scene.fog = new THREE.Fog(0xcce0ff, 500, 10000);\n                        // camera\n                        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\n                        camera.target = new THREE.Vector3(0, 0, 0);\n                        camera.position.set(200, 200, 1000);\n                        scene.add(camera);\n                        // lights\n                        var light, materials;\n                        scene.add(new THREE.AmbientLight(0x666666));\n                        light = new THREE.DirectionalLight(0xdfebff, 1.75);\n                        light.position.set(50, 200, 100);\n                        light.position.multiplyScalar(1.3);\n                        light.castShadow = true;\n                        light.shadow.mapSize.width = 1024;\n                        light.shadow.mapSize.height = 1024;\n                        var d = 300;\n                        light.shadow.camera.left = -d;\n                        light.shadow.camera.right = d;\n                        light.shadow.camera.top = d;\n                        light.shadow.camera.bottom = -d;\n                        light.shadow.camera.far = 1000;\n                        scene.add(light);\n\n                        // cloth material\n                        var loader = new THREE.TextureLoader();\n                        var geometry = new THREE.SphereGeometry(1500, 60, 40);\n                        geometry.scale(-1, 1, 1);\n\n                        var material = new THREE.MeshBasicMaterial({\n                                map: new THREE.TextureLoader().load('assets/images/store-image-one.jpg')\n                        });\n\n                        meshCube = new THREE.Mesh(geometry, material);\n\n                        scene.add(meshCube);\n\n                        renderer = new THREE.WebGLRenderer({\n                                antialias: true\n                        });\n                        renderer.setPixelRatio(window.devicePixelRatio);\n                        renderer.setSize(window.innerWidth - 400, window.innerHeight);\n\n                        // Sets the color on top\n                        renderer.setClearColor(scene.fog.color);\n\n                        (container[0]).appendChild(renderer.domElement);\n                        renderer.gammaInput = true;\n                        renderer.gammaOutput = true;\n                        renderer.shadowMap.enabled = true;\n                        // controls\n                        controls = new THREE.OrbitControls(camera, renderer.domElement);\n                        controls.maxPolarAngle = Math.PI * 0.4;\n                        controls.minDistance = 150;\n                        controls.maxDistance = 1000;\n                        window.addEventListener('resize', onWindowResize, false);\n                        // sphere.visible = ! true;\n                        loadModel('app/base/interior.3ds.json');\n\n\n                }\n\n                function animate() {\n                        requestAnimationFrame(animate);\n                        render();\n                }\n\n                function onWindowResize() {\n                        camera.aspect = window.innerWidth / window.innerHeight;\n                        camera.updateProjectionMatrix();\n                        renderer.setSize(window.innerWidth, window.innerHeight);\n                }\n\n                function render() {\n                        renderer.render(scene, camera);\n                }\n\n                var counter = 0;\n\n                $(renderer.domElement).on('mousedown', function(e) {\n                                // console.log(e);\n                                // console.log(objects);\n                                counter++;\n                                isDragging = true;\n                                var projector = new THREE.Projector();\n\n                                var mouseX = (e.clientX / renderer.domElement.clientWidth) * 2 - 1;\n                                var mouseY = -(e.clientY / renderer.domElement.clientHeight) * 2 + 1;\n\n                                // Get 3D vector from 3D mouse position using 'unproject' function\n                                var vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n                                vector.unproject(camera);\n\n                                // Set the raycaster position\n                                raycaster.set(camera.position, vector.sub(camera.position).normalize());\n\n                                // Find all intersected objects\n                                var intersects = raycaster.intersectObjects(objects);\n\n                                if(counter == 1){\n                                        if (intersects.length > 0) {\n                                                // console.log(intersects[0].point);\n                                                controls.enableRotate = false;\n                                                selection = intersects[0].object;\n                                                if(intersects[0].point.z < 0){\n                                                        var intersects = raycaster.intersectObject(plane_back_new);\n                                                        offset.copy(intersects[0].point).sub(plane_back_new.position);\n                                                } else {\n                                                        var intersects = raycaster.intersectObject(plane_new);\n                                                        offset.copy(intersects[0].point).sub(plane_new.position);\n                                                }\n                                        } else {\n                                                controls.enableRotate = true;\n                                                selection = null;\n                                                counter = 0;\n                                        }\n                                } else {\n                                        controls.enableRotate = true;\n                                        counter = 0;\n                                        selection = null;\n                                }\n                        })\n                        .on('mousemove', function(e) {\n                                var mouseX = (e.clientX / renderer.domElement.clientWidth) * 2 - 1;\n                                var mouseY = -(e.clientY / renderer.domElement.clientHeight) * 2 + 1;\n\n                                var deltaMove = {\n                                        x: e.offsetX - previousMousePosition.x,\n                                        y: e.offsetY - previousMousePosition.y\n                                };\n\n                                if (isDragging && !controls.enableRotate) {\n                                        var vector = new THREE.Vector3(mouseX, mouseY, 1);\n                                        vector.unproject(camera);\n                                        // console.log(selection);\n                                        // Set the raycaster position\n                                        raycaster.set(camera.position, vector.sub(camera.position).normalize());\n\n                                        if(selection){\n                                                if(selection.position.z < 0){\n                                                        var intersects = raycaster.intersectObject(plane_back_new);\n                                                } else {\n                                                        var intersects = raycaster.intersectObject(plane_new);\n                                                }\n\n                                                if(intersects[0] != undefined){\n                                                        selection.position.copy(intersects[0].point.sub(offset));\n                                                }\n                                        }\n                                } else {\n                                        selection = null;\n                                }\n                        });\n        }\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('sites')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n        'use strict';\n\n        angular\n                .module('sites')\n                .config(routerConfig);\n\n        /** @ngInject */\n        function routerConfig($stateProvider, $urlRouterProvider) {\n                $stateProvider\n                        .state('home', {\n                                url: '/',\n                                templateUrl: 'app/base/base.html',\n                                controller: 'BaseController',\n                                controllerAs: 'base'\n                        });\n                $urlRouterProvider.otherwise('/');\n        }\n})();\n(function() {\n        'use strict';\n\n        angular\n                .module('sites')\n                .directive('tjsModelViewer', tjsModelViewer)\n                .directive('ngFileSelect', ngFileSelect);\n\n        /** @ngInject */\n        function tjsModelViewer() {\n                return {\n                        restrict: \"E\",\n                        scope: {\n                                assimpUrl: \"=assimpUrl\"\n                        },\n                        link: function(scope, elem, attr) {\n                                var camera;\n                                var scene;\n                                var renderer;\n                                var previous;\n\n                                // init scene\n                                init();\n\n                                // Load jeep model using the AssimpJSONLoader\n                                var loader1 = new THREE.AssimpJSONLoader();\n\n                                scope.$watch(\"assimpUrl\", function(newValue, oldValue) {\n                                        if (newValue != oldValue) loadModel(newValue);\n                                });\n\n                                function loadModel(modelUrl) {\n                                        loader1.load(modelUrl, function(assimpjson) {\n                                                console.log(assimpjson);\n                                                assimpjson.scale.x = assimpjson.scale.y = assimpjson.scale.z = 0.2;\n                                                assimpjson.updateMatrix();\n                                                if (previous) scene.remove(previous);\n                                                scene.add(assimpjson);\n\n                                                previous = assimpjson;\n                                        });\n                                }\n\n                                loadModel(scope.assimpUrl);\n                                animate();\n\n                                function init() {\n                                        camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 2000);\n                                        camera.position.set(2, 4, 5);\n                                        scene = new THREE.Scene();\n                                        scene.fog = new THREE.FogExp2(0x000000, 0.035);\n                                        // Lights\n                                        scene.add(new THREE.AmbientLight(0xcccccc));\n                                        var directionalLight = new THREE.DirectionalLight( /*Math.random() * 0xffffff*/ 0xeeeeee);\n                                        directionalLight.position.x = Math.random() - 0.5;\n                                        directionalLight.position.y = Math.random() - 0.5;\n                                        directionalLight.position.z = Math.random() - 0.5;\n                                        directionalLight.position.normalize();\n                                        scene.add(directionalLight);\n\n                                        // Renderer\n                                        renderer = new THREE.WebGLRenderer();\n                                        renderer.setSize(window.innerWidth, window.innerHeight);\n                                        elem[0].appendChild(renderer.domElement);\n\n                                        // Events\n                                        window.addEventListener('resize', onWindowResize, false);\n                                }\n\n                                //\n                                function onWindowResize(event) {\n                                        renderer.setSize(window.innerWidth, window.innerHeight);\n                                        camera.aspect = window.innerWidth / window.innerHeight;\n                                        camera.updateProjectionMatrix();\n                                }\n\n                                //\n                                var t = 0;\n\n                                function animate() {\n                                        requestAnimationFrame(animate);\n                                        render();\n                                }\n\n                                //\n                                function render() {\n                                        var timer = Date.now() * 0.0005;\n                                        camera.position.x = Math.cos(timer) * 10;\n                                        camera.position.y = 4;\n                                        camera.position.z = Math.sin(timer) * 10;\n                                        camera.lookAt(scene.position);\n                                        renderer.render(scene, camera);\n                                }\n                        }\n                }\n        }\n\n        function ngFileSelect($resource) {\n                return {\n                        link: function($scope, el, attr) {\n                                el.bind(\"change\", function(e) {\n                                        for(var s=0;s<e.target.files.length;s++){\n                                                // moduleService.upload_request('/imageupload/images', e.target.files[s])\n                                                $('#image-preview').append(\n                                                        '<div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">'+\n                                                                '<img class=\"img-responsive\" src=\"'+e.target.value+'\"/>'+\n                                                        '</div>'\n                                                );\n                                        }\n                                        // $scope.getFile();\n                                });\n                        }\n                }\n        }\n    \n})();\n/* global malarkey:false, moment:false */\n(function() {\n        'use strict';\n\n        angular\n                .module('sites')\n                .constant('moment', moment);\n})();\n(function() {\n        'use strict';\n\n        angular\n                .module('sites')\n                .config(config);\n\n        /** @ngInject */\n        function config($logProvider, toastrConfig) {\n\n        }\n})();\nangular.module(\"sites\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/base/base.html\",\"<!-- <tjs-model-viewer assimp-url=\\\"assimpModelUrl\\\"></tjs-model-viewer> --><div id=webGLContainer><div class=mainContainer id=canvasElement></div><div id=sideNav><div class=row><div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"><button class=\\\"btn btn-primary btn-change-color\\\" id=change-red-color ng-click=\\\"base.clickedColor(\\'0xC63333\\')\\\">Red Color</button> <button class=\\\"btn btn-primary btn-change-color\\\" id=change-black-color ng-click=\\\"base.clickedColor(\\'0x000000\\')\\\">Black Color</button> <button class=\\\"btn btn-primary btn-change-color\\\" id=change-green-color ng-click=\\\"base.clickedColor(\\'0x00FF00\\')\\\">Lime Green Color</button> <button class=\\\"btn btn-primary btn-change-color\\\" id=change-orange-color ng-click=\\\"base.clickedColor(\\'0xFF4500\\')\\\">orange Color</button> <button class=\\\"btn btn-primary btn-change-color\\\" id=change-white-color ng-click=\\\"base.clickedColor(\\'0xFFFFFF\\')\\\">White Color</button><!-- <button class=\\\"btn btn-primary btn-change-color\\\" id=\\\"upload-image\\\">\\n\t\t\t\t\tImage Upload\\n\t\t\t\t</button> --></div><div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\"><input type=file name=file id=file-6 class=inputFile accept=image/* base-sixty-four-input onchange=angular.element(this).scope().frontImageChanged(this)></div><div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\"><input ng-model=get_image_detail type=file name=file id=file-5 class=\\\"inputfile inputfile-4\\\" accept=image/* base-sixty-four-input onchange=angular.element(this).scope().fileNameChanged(this)></div></div><div class=row><div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"><input type=file name=file id=file-6 class=inputFile accept=image/* base-sixty-four-input onchange=angular.element(this).scope().wrapImageChanged(this)></div></div></div></div>\");}]);"],"sourceRoot":"/source/"}